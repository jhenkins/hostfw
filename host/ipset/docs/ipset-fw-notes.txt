## Useful ICMP
## * All ICMP unreachables - 	type: 3 code: -1
## * ping reply			type: 0 code: 0
## * time exceeded			type: 11 code: 0
## * time exceeded in transit	type: 11 code: 1
## ping request			type: 8 code: 0

## Vars
IPTABLES="/sbin/iptables"
IP6TABLES="/sbin/ip6tables"
IP="/sbin/ip"
IFCONFIG="/sbin/ifconfig"
VCONFIG="/sbin/vconfig"
IPSET="/usr/sbin/ipset"
LOGGER="/usr/bin/logger"

## Functions
epilog_commands() {
    echo "Running epilog script"
    ## Allow forwarding on bridge interfaces
# Sleep for 2 seconds
/usr/bin/sleep 2
# 
/usr/sbin/iptables -I FORWARD -i br2 -j ACCEPT
}

## Prep
# Drop all ipv6
$IP6TABLES  -P OUTPUT  DROP
$IP6TABLES  -P INPUT   DROP
$IP6TABLES  -P FORWARD DROP

# accept established sessions
$IPTABLES -A INPUT   -m state --state ESTABLISHED,RELATED -j ACCEPT
$IPTABLES -A OUTPUT  -m state --state ESTABLISHED,RELATED -j ACCEPT
$IPTABLES -A FORWARD -m state --state ESTABLISHED,RELATED -j ACCEPT

## Create lists to use with ipset
# All local host IP addresses excluding lo

## NAT rules

# Rule 1 - NAT outwards

$IPTABLES -w -t nat -A POSTROUTING -o br2   -s $PRIVNET/$PRIVPREFIX  -j SNAT --to-source $HOSTIP

## Global rules


# ================ Table 'filter', rule set Policy
# 
# Rule 0 (global)
# 
echo "Rule 0 (global)"
# 
# Allow ping and traceroute to reach host
$IPTABLES -w -N MyIcmpChain.0
$IPTABLES -w -A OUTPUT  -d 10.250.4.1   -m conntrack --ctstate NEW  -j MyIcmpChain.0
$IPTABLES -w -A OUTPUT  -d 172.16.18.35   -m conntrack --ctstate NEW  -j MyIcmpChain.0
$IPTABLES -w -A OUTPUT  -d 172.16.18.36   -m conntrack --ctstate NEW  -j MyIcmpChain.0
$IPTABLES -w -N RULE_0
$IPTABLES -w -A MyIcmpChain.0 -p icmp  -m icmp  --icmp-type 3  -j RULE_0
$IPTABLES -w -A MyIcmpChain.0 -p icmp  -m icmp  --icmp-type 0/0   -j RULE_0
$IPTABLES -w -A MyIcmpChain.0 -p icmp  -m icmp  --icmp-type 8/0   -j RULE_0
$IPTABLES -w -A MyIcmpChain.0 -p icmp  -m icmp  --icmp-type 11/0   -j RULE_0
$IPTABLES -w -A MyIcmpChain.0 -p icmp  -m icmp  --icmp-type 11/1   -j RULE_0
$IPTABLES -w -N MyIcmpChain.1
$IPTABLES -w -A FORWARD  -d 10.250.4.1   -m conntrack --ctstate NEW  -j MyIcmpChain.1
$IPTABLES -w -A FORWARD  -d 172.16.18.35   -m conntrack --ctstate NEW  -j MyIcmpChain.1
$IPTABLES -w -A FORWARD  -d 172.16.18.36   -m conntrack --ctstate NEW  -j MyIcmpChain.1
$IPTABLES -w -A MyIcmpChain.1 -p icmp  -m icmp  --icmp-type 3  -j RULE_0
$IPTABLES -w -A MyIcmpChain.1 -p icmp  -m icmp  --icmp-type 0/0   -j RULE_0
$IPTABLES -w -A MyIcmpChain.1 -p icmp  -m icmp  --icmp-type 8/0   -j RULE_0
$IPTABLES -w -A MyIcmpChain.1 -p icmp  -m icmp  --icmp-type 11/0   -j RULE_0
$IPTABLES -w -A MyIcmpChain.1 -p icmp  -m icmp  --icmp-type 11/1   -j RULE_0
$IPTABLES -w -A INPUT -p icmp  -m icmp  --icmp-type 3  -m conntrack --ctstate NEW  -j RULE_0
$IPTABLES -w -A INPUT -p icmp  -m icmp  --icmp-type 0/0   -m conntrack --ctstate NEW  -j RULE_0
$IPTABLES -w -A INPUT -p icmp  -m icmp  --icmp-type 8/0   -m conntrack --ctstate NEW  -j RULE_0
$IPTABLES -w -A INPUT -p icmp  -m icmp  --icmp-type 11/0   -m conntrack --ctstate NEW  -j RULE_0
$IPTABLES -w -A INPUT -p icmp  -m icmp  --icmp-type 11/1   -m conntrack --ctstate NEW  -j RULE_0
$IPTABLES -w -A RULE_0  -j LOG  --log-level info --log-prefix "RULE 0 -- ACCEPT "
$IPTABLES -w -A RULE_0  -j ACCEPT

# 
# Rule 1 (global)
# 
echo "Rule 1 (global)"
# 
# Create and use "fw-self" ipset
# e.g.:
# ipset -N fw-self iphash
# or
# ipset create fw-self hash:ip
# 
# Loop through interfaces and IPs and add each IP:
# ipset add fw-self 1.1.1.1
# ipset add fw-self 2.2.2.2
#
# Allow FW to talk to itself
$IPTABLES -w -N TalkToSelf.0
$IPTABLES -w -A FORWARD  -m set --match-set fw-self src -m conntrack --ctstate NEW  -j TalkToSelf.0
$IPTABLES -w -N RULE_1
$IPTABLES -w -A TalkToSelf.0  -m set --match-set fw-self dst -j RULE_1
$IPTABLES -w -N TalkToSelf.1
$IPTABLES -w -A INPUT  -m set --match-set fw-self src -m conntrack --ctstate NEW  -j TalkToSelf.1
$IPTABLES -w -A TalkToSelf.1  -m set --match-set fw-self dst -j RULE_1
$IPTABLES -w -N TalkToSelf.2
$IPTABLES -w -A FORWARD -m set --match-set fw-self src -m conntrack --ctstate NEW  -j TalkToSelf.2
$IPTABLES -w -A TalkToSelf.2  -m set --match-set fw-self dst -j RULE_1
$IPTABLES -w -N TalkToSelf.3
$IPTABLES -w -A FORWARD  -m set --match-set fw-self src -m conntrack --ctstate NEW  -j TalkToSelf.3
$IPTABLES -w -A TalkToSelf.3  -m set --match-set fw-self dst -j RULE_1
$IPTABLES -w -N TalkToSelf.4
$IPTABLES -w -A OUTPUT  -m set --match-set fw-self src -j TalkToSelf.4
$IPTABLES -w -A TalkToSelf.4  -m set --match-set fw-self dst -j RULE_1
$IPTABLES -w -A RULE_1  -j LOG  --log-level info --log-prefix "RULE 1 -- ACCEPT "
$IPTABLES -w -A RULE_1  -j ACCEPT

# 
# Rule 2 (global)
# 
echo "Rule 2 (global)"
# 
# Create and use "fw-ip" ipset
# ipset create fw-ip hash:ip
# 
# Loop through interfaces and IPs and add each IP:
# ipset add fw-self 1.1.1.1
# ipset add fw-self 2.2.2.2
#
# FW can go everywhere
$IPTABLES -w -N RULE_2
$IPTABLES -w -A INPUT  -m set --match-set fw-ip src  -m conntrack --ctstate NEW  -j RULE_2
$IPTABLES -w -A FORWARD  -m set --match-set fw-ip src -m conntrack --ctstate NEW  -j RULE_2
$IPTABLES -w -A OUTPUT  -m conntrack --ctstate NEW  -j RULE_2
$IPTABLES -w -A RULE_2  -j LOG  --log-level info --log-prefix "RULE 2 -- ACCEPT "
$IPTABLES -w -A RULE_2  -j ACCEPT

# 
# Rule 3 (global)
# 
echo "Rule 3 (global)"
# 
# Allow all traffic from VPN network into the internal network
$IPTABLES -w -N RULE_3
$IPTABLES -w -A FORWARD  -s 10.250.5.0/24   -d 10.250.4.0/24   -m conntrack --ctstate NEW  -j RULE_3
$IPTABLES -w -A RULE_3  -j LOG  --log-level info --log-prefix "RULE 3 -- ACCEPT "
$IPTABLES -w -A RULE_3  -j ACCEPT

# 
# Rule 4 (global)
# 
echo "Rule 4 (global)"
# 
# Allow agents out
$IPTABLES -w -N AgentsOutbound.0
$IPTABLES -w -A INPUT  -s 10.250.4.0/24   -m conntrack --ctstate NEW  -j AgentsOutbound.0
$IPTABLES -w -N RULE_4
$IPTABLES -w -A AgentsOutbound.0 -p icmp  -m icmp  --icmp-type 3  -j RULE_4
$IPTABLES -w -A AgentsOutbound.0 -p icmp  -m icmp  --icmp-type 0/0   -j RULE_4
$IPTABLES -w -A AgentsOutbound.0 -p icmp  -m icmp  --icmp-type 8/0   -j RULE_4
$IPTABLES -w -A AgentsOutbound.0 -p icmp  -m icmp  --icmp-type 11/0   -j RULE_4
$IPTABLES -w -A AgentsOutbound.0 -p icmp  -m icmp  --icmp-type 11/1   -j RULE_4
$IPTABLES -w -A AgentsOutbound.0 -p tcp -m tcp  -m multiport  --dports 53,80,443,3306,22  -j RULE_4
$IPTABLES -w -A AgentsOutbound.0 -p udp -m udp  --dport 53  -j RULE_4
$IPTABLES -w -N AgentsOutbound.1
$IPTABLES -w -A FORWARD  -s 10.250.4.0/24   -m conntrack --ctstate NEW  -j AgentsOutbound.1
$IPTABLES -w -A AgentsOutbound.1 -p icmp  -m icmp  --icmp-type 3  -j RULE_4
$IPTABLES -w -A AgentsOutbound.1 -p icmp  -m icmp  --icmp-type 0/0   -j RULE_4
$IPTABLES -w -A AgentsOutbound.1 -p icmp  -m icmp  --icmp-type 8/0   -j RULE_4
$IPTABLES -w -A AgentsOutbound.1 -p icmp  -m icmp  --icmp-type 11/0   -j RULE_4
$IPTABLES -w -A AgentsOutbound.1 -p icmp  -m icmp  --icmp-type 11/1   -j RULE_4
$IPTABLES -w -A AgentsOutbound.1 -p tcp -m tcp  -m multiport  --dports 53,80,443,3306,22  -j RULE_4
$IPTABLES -w -A AgentsOutbound.1 -p udp -m udp  --dport 53  -j RULE_4
$IPTABLES -w -A RULE_4  -j LOG  --log-level info --log-prefix "RULE 4 -- ACCEPT "
$IPTABLES -w -A RULE_4  -j ACCEPT

# 
# Rule 5 (global)
# 
echo "Rule 5 (global)"
# 
# Create and use "good-nets" ipset
# ipset create good-nets hash:net
# 
# Loop through interfaces and IPs and add each IP:
# ipset add good-nets 1.1.1.1/24
# ipset add good-nets 2.2.2.2/24
# Good hosts and nets can get to us on all ports.
$IPTABLES -w -N GoodHostsAndNets.0
$IPTABLES -w -A FORWARD -p tcp -m tcp  --dport 22  -m conntrack --ctstate NEW  -j GoodHostsAndNets.0
$IPTABLES -w -N GoodHostsAndNets.1
$IPTABLES -w -A GoodHostsAndNets.0  -m set --match-set fw-ip dst -j GoodHostsAndNets.1
$IPTABLES -w -N RULE_5
$IPTABLES -w -A GoodHostsAndNets.1  -m set --match-set good-nets src   -j RULE_5
$IPTABLES -w -N GoodHostsAndNets.2
$IPTABLES -w -A INPUT -p tcp -m tcp  --dport 22  -m conntrack --ctstate NEW  -j GoodHostsAndNets.2
$IPTABLES -w -A GoodHostsAndNets.2  -m set --match-set good-nets src -j RULE_5
$IPTABLES -w -A RULE_5  -j LOG  --log-level info --log-prefix "RULE 5 -- ACCEPT "
$IPTABLES -w -A RULE_5  -j ACCEPT

# 
# Rule 6 (global)
# 
echo "Rule 6 (global)"
# 
# Good hosts and nets can get to internal network on some ports.
$IPTABLES -w -N GoodHostsAndNetsInt.0
$IPTABLES -w -A FORWARD  -d $PRIVNET/$PREFIX  -m conntrack --ctstate NEW  -j GoodHostsAndNetsInt.0
$IPTABLES -w -N GoodHostsAndNetsInt.1
$IPTABLES -w -A GoodHostsAndNetsInt.0  -m set --match-set good-nets src -j GoodHostsAndNetsInt.1
$IPTABLES -w -N RULE_6
$IPTABLES -w -A GoodHostsAndNetsInt.1 -p icmp  -m icmp  --icmp-type 3  -j RULE_6
$IPTABLES -w -A GoodHostsAndNetsInt.1 -p icmp  -m icmp  --icmp-type 0/0   -j RULE_6
$IPTABLES -w -A GoodHostsAndNetsInt.1 -p icmp  -m icmp  --icmp-type 8/0   -j RULE_6
$IPTABLES -w -A GoodHostsAndNetsInt.1 -p icmp  -m icmp  --icmp-type 11/0   -j RULE_6
$IPTABLES -w -A GoodHostsAndNetsInt.1 -p icmp  -m icmp  --icmp-type 11/1   -j RULE_6
$IPTABLES -w -A GoodHostsAndNetsInt.1 -p tcp -m tcp  -m multiport  --dports 80,443,3306,22  -j RULE_6
$IPTABLES -w -A RULE_6  -j LOG  --log-level info --log-prefix "RULE 6 -- ACCEPT "
$IPTABLES -w -A RULE_6  -j ACCEPT

# 
# Rule 7 (global)
# 
echo "Rule 7 (global)"
# 
# Last catch-all rule
$IPTABLES -w -N RULE_7
$IPTABLES -w -A OUTPUT  -j RULE_7
$IPTABLES -w -A INPUT  -j RULE_7
$IPTABLES -w -A FORWARD  -j RULE_7
$IPTABLES -w -A RULE_7  -j LOG  --log-level info --log-prefix "RULE 7 -- DENY "
$IPTABLES -w -A RULE_7  -j DROP


